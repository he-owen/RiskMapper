{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n\n// const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n// const loadGoogleMapsScript = (): Promise<void> => {\n//   return new Promise((resolve, reject) => {\n//     if (window.google && window.google.maps) {\n//       resolve();\n//       return;\n//     }\n\n//     const existingScript = document.getElementById(\"googleMaps\");\n//     if (!existingScript) {\n//       const script = document.createElement(\"script\");\n//       script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}`;\n//       script.id = \"googleMaps\";\n//       script.async = true;\n//       script.defer = true;\n//       script.onload = () => {\n//         if (window.google && window.google.maps) {\n//           resolve();\n//         } else {\n//           reject(new Error(\"Google Maps failed to load.\"));\n\n//         }\n//       };\n//       script.onerror = () => reject(new Error(\"Failed to load Google Maps script.\"));\n//       document.body.appendChild(script);\n//     } else {\n//       existingScript.onload = () => resolve();\n//     }\n//   });\n// };\n\n// const App = () => {\n//   const [mapLoaded, setMapLoaded] = useState(false);\n//   const mapRef = useRef<HTMLDivElement | null>(null);\n//   const mapInstanceRef = useRef<google.maps.Map | null>(null);\n//   const markerRef = useRef<google.maps.Marker | null>(null);\n\n//   useEffect(() => {\n//     loadGoogleMapsScript()\n//       .then(() => {\n//         setMapLoaded(true);\n//       })\n//       .catch((error) => console.error(error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (mapLoaded && mapRef.current) {\n//       mapInstanceRef.current = new google.maps.Map(mapRef.current, {\n//         center: { lat: 37.7749, lng: -122.4194 }, // Default: San Francisco\n//         zoom: 10,\n//       });\n//     }\n//   }, [mapLoaded]);\n\n//   const locateUser = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const userLocation = {\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//           };\n//           if (mapInstanceRef.current) {\n//         mapInstanceRef.current.setCenter(userLocation);\n//         mapInstanceRef.current.setZoom(14);\n\n//         // Remove old marker\n//         if (markerRef.current) {\n//           markerRef.current.setMap(null);\n//         }\n\n//         // Create new marker\n//         markerRef.current = new google.maps.Marker({\n//           position: userLocation,\n//           map: mapInstanceRef.current,\n//           title: \"You are here!\",\n//         });\n//           }\n//         },\n//         () => {\n//           alert(\"Error: Could not get location. Please enter your location manually.\");\n//           const locationInput = prompt(\"Enter your location (e.g., San Francisco, CA):\");\n//           if (locationInput) {\n//         const geocoder = new google.maps.Geocoder();\n//         geocoder.geocode({ address: locationInput }, (results, status) => {\n//           if (status === \"OK\" && results && results[0]) {\n//             const userLocation = results[0].geometry.location;\n//             if (mapInstanceRef.current) {\n//           mapInstanceRef.current.setCenter(userLocation);\n//           mapInstanceRef.current.setZoom(14);\n\n//           // Remove old marker\n//           if (markerRef.current) {\n//             markerRef.current.setMap(null);\n//           }\n\n//           // Create new marker\n//           markerRef.current = new google.maps.Marker({\n//             position: userLocation,\n//             map: mapInstanceRef.current,\n//             title: \"You are here!\",\n//           });\n//             }\n//           } else {\n//             alert(\"Error: Could not find the location.\");\n//           }\n//         });\n//           }\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by your browser.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ textAlign: \"center\" }}>\n//       <h1>Google Maps in React</h1>\n//       <button onClick={locateUser} style={{ marginBottom: \"10px\", padding: \"10px\" }}>\n//         Find My Location\n//       </button>\n//       <div ref={mapRef} style={{ height: \"500px\", width: \"50%\" }}></div>\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/saakethpula/Documents/HenHacks 2025/henhacks2025/my-app/src/App.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n\n// const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n// const loadGoogleMapsScript = (): Promise<void> => {\n//   return new Promise((resolve, reject) => {\n//     if (window.google && window.google.maps) {\n//       resolve();\n//       return;\n//     }\n\n//     const existingScript = document.getElementById(\"googleMaps\");\n//     if (!existingScript) {\n//       const script = document.createElement(\"script\");\n//       script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}`;\n//       script.id = \"googleMaps\";\n//       script.async = true;\n//       script.defer = true;\n//       script.onload = () => {\n//         if (window.google && window.google.maps) {\n//           resolve();\n//         } else {\n//           reject(new Error(\"Google Maps failed to load.\"));\n          \n//         }\n//       };\n//       script.onerror = () => reject(new Error(\"Failed to load Google Maps script.\"));\n//       document.body.appendChild(script);\n//     } else {\n//       existingScript.onload = () => resolve();\n//     }\n//   });\n// };\n\n// const App = () => {\n//   const [mapLoaded, setMapLoaded] = useState(false);\n//   const mapRef = useRef<HTMLDivElement | null>(null);\n//   const mapInstanceRef = useRef<google.maps.Map | null>(null);\n//   const markerRef = useRef<google.maps.Marker | null>(null);\n\n//   useEffect(() => {\n//     loadGoogleMapsScript()\n//       .then(() => {\n//         setMapLoaded(true);\n//       })\n//       .catch((error) => console.error(error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (mapLoaded && mapRef.current) {\n//       mapInstanceRef.current = new google.maps.Map(mapRef.current, {\n//         center: { lat: 37.7749, lng: -122.4194 }, // Default: San Francisco\n//         zoom: 10,\n//       });\n//     }\n//   }, [mapLoaded]);\n\n//   const locateUser = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const userLocation = {\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//           };\n//           if (mapInstanceRef.current) {\n//         mapInstanceRef.current.setCenter(userLocation);\n//         mapInstanceRef.current.setZoom(14);\n\n//         // Remove old marker\n//         if (markerRef.current) {\n//           markerRef.current.setMap(null);\n//         }\n\n//         // Create new marker\n//         markerRef.current = new google.maps.Marker({\n//           position: userLocation,\n//           map: mapInstanceRef.current,\n//           title: \"You are here!\",\n//         });\n//           }\n//         },\n//         () => {\n//           alert(\"Error: Could not get location. Please enter your location manually.\");\n//           const locationInput = prompt(\"Enter your location (e.g., San Francisco, CA):\");\n//           if (locationInput) {\n//         const geocoder = new google.maps.Geocoder();\n//         geocoder.geocode({ address: locationInput }, (results, status) => {\n//           if (status === \"OK\" && results && results[0]) {\n//             const userLocation = results[0].geometry.location;\n//             if (mapInstanceRef.current) {\n//           mapInstanceRef.current.setCenter(userLocation);\n//           mapInstanceRef.current.setZoom(14);\n\n//           // Remove old marker\n//           if (markerRef.current) {\n//             markerRef.current.setMap(null);\n//           }\n\n//           // Create new marker\n//           markerRef.current = new google.maps.Marker({\n//             position: userLocation,\n//             map: mapInstanceRef.current,\n//             title: \"You are here!\",\n//           });\n//             }\n//           } else {\n//             alert(\"Error: Could not find the location.\");\n//           }\n//         });\n//           }\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by your browser.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ textAlign: \"center\" }}>\n//       <h1>Google Maps in React</h1>\n//       <button onClick={locateUser} style={{ marginBottom: \"10px\", padding: \"10px\" }}>\n//         Find My Location\n//       </button>\n//       <div ref={mapRef} style={{ height: \"500px\", width: \"50%\" }}></div>\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}