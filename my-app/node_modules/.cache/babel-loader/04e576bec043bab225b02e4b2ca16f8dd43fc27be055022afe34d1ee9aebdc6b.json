{"ast":null,"code":"var _jsxFileName = \"/Users/saakethpula/Documents/HenHacks 2025/henhacks2025/my-app/src/Map.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\nconst loadGoogleMapsScript = () => {\n  return new Promise((resolve, reject) => {\n    if (window.google && window.google.maps) {\n      resolve();\n      return;\n    }\n    const existingScript = document.getElementById(\"googleMaps\");\n    if (!existingScript) {\n      const script = document.createElement(\"script\");\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}`;\n      script.id = \"googleMaps\";\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        if (window.google && window.google.maps) {\n          resolve();\n        } else {\n          reject(new Error(\"Google Maps failed to load.\"));\n        }\n      };\n      script.onerror = () => reject(new Error(\"Failed to load Google Maps script.\"));\n      document.body.appendChild(script);\n    } else {\n      existingScript.onload = () => resolve();\n    }\n  });\n};\nconst Map = () => {\n  _s();\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markerRef = useRef(null);\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    loadGoogleMapsScript().then(() => setMapLoaded(true)).catch(error => console.error(error));\n  }, []);\n  useEffect(() => {\n    if (mapLoaded && mapRef.current) {\n      mapInstanceRef.current = new google.maps.Map(mapRef.current, {\n        center: {\n          lat: 37.7749,\n          lng: -122.4194\n        },\n        // Default: San Francisco\n        zoom: 10\n      });\n    }\n  }, [mapLoaded]);\n  const locateUser = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const userLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        if (mapInstanceRef.current) {\n          mapInstanceRef.current.setCenter(userLocation);\n          mapInstanceRef.current.setZoom(14);\n\n          // Remove old marker\n          if (markerRef.current) {\n            markerRef.current.setMap(null);\n          }\n\n          // Create new marker\n          markerRef.current = new google.maps.Marker({\n            position: userLocation,\n            map: mapInstanceRef.current,\n            title: \"You are here!\"\n          });\n\n          // Fetch hospitals from FastAPI backend\n          try {\n            const response = await fetch(`http://127.0.0.1:8000/hospitals/?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10000`);\n            const data = await response.json();\n            setData({\n              hospitals: data.hospitals\n            });\n            console.log(\"Hospitals:\", data.hospitals);\n          } catch (error) {\n            console.error(\"Error fetching hospitals:\", error);\n          }\n        }\n      }, () => {\n        alert(\"Error: Could not get location. Please enter your location manually.\");\n      });\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"500px\",\n        width: \"50%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: \"20px\",\n        width: \"30%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: locateUser,\n        style: {\n          marginTop: \"10px\",\n          padding: \"10px\"\n        },\n        children: \"Find My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), data && data.hospitals && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Nearby Hospitals:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: data.hospitals.slice(0, 2).map((hospital, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: hospital.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 69\n            }, this), hospital.address, hospital.distance_miles && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 67\n              }, this), hospital.distance_miles]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                if (mapInstanceRef.current && markerRef.current) {\n                  var _markerRef$current;\n                  const directionsService = new google.maps.DirectionsService();\n                  const directionsRenderer = new google.maps.DirectionsRenderer({\n                    draggable: true,\n                    panel: document.getElementById(`directionsPanel-${index}`)\n                  });\n                  directionsRenderer.setMap(mapInstanceRef.current);\n                  const origin = (_markerRef$current = markerRef.current) === null || _markerRef$current === void 0 ? void 0 : _markerRef$current.getPosition();\n                  if (!origin) {\n                    console.error(\"Origin is not available.\");\n                    return;\n                  }\n                  const request = {\n                    origin: origin,\n                    destination: hospital.address,\n                    travelMode: google.maps.TravelMode.DRIVING\n                  };\n                  directionsService.route(request, (result, status) => {\n                    if (status === google.maps.DirectionsStatus.OK) {\n                      directionsRenderer.setDirections(result);\n                    } else {\n                      console.error(`Directions request failed due to ${status}`);\n                    }\n                  });\n                }\n              },\n              children: \"Show Directions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: `directionsPanel-${index}`,\n              style: {\n                marginTop: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"kXXnx5nAKPoH+3NCm0F8kp6ez/0=\");\n_c = Map;\nexport default Map;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n\n// const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n// const loadGoogleMapsScript = (): Promise<void> => {\n//   return new Promise((resolve, reject) => {\n//     if (window.google && window.google.maps) {\n//       resolve();\n//       return;\n//     }\n\n//     const existingScript = document.getElementById(\"googleMaps\");\n//     if (!existingScript) {\n//       const script = document.createElement(\"script\");\n//       script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}`;\n//       script.id = \"googleMaps\";\n//       script.async = true;\n//       script.defer = true;\n//       script.onload = () => {\n//         if (window.google && window.google.maps) {\n//           resolve();\n//         } else {\n//           reject(new Error(\"Google Maps failed to load.\"));\n//         }\n//       };\n//       script.onerror = () => reject(new Error(\"Failed to load Google Maps script.\"));\n//       document.body.appendChild(script);\n//     } else {\n//       existingScript.onload = () => resolve();\n//     }\n//   });\n// };\n\n// const Map: React.FC = () => {\n//   const [mapLoaded, setMapLoaded] = useState(false);\n//   const mapRef = useRef<HTMLDivElement | null>(null);\n//   const mapInstanceRef = useRef<google.maps.Map | null>(null);\n//   const markerRef = useRef<google.maps.Marker | null>(null);\n//   const [data, setData] = useState<{ hospitals: any[] } | null>(null);\n\n//   useEffect(() => {\n//     loadGoogleMapsScript()\n//       .then(() => setMapLoaded(true))\n//       .catch((error) => console.error(error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (mapLoaded && mapRef.current) {\n//       mapInstanceRef.current = new google.maps.Map(mapRef.current, {\n//         center: { lat: 37.7749, lng: -122.4194 }, // Default: San Francisco\n//         zoom: 10,\n//       });\n//     }\n//   }, [mapLoaded]);\n\n//   const locateUser = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         async (position) => {\n//           const userLocation = {\n//             lat: position.coords.latitude,\n//             lng: position.coords.longitude,\n//           };\n\n//           if (mapInstanceRef.current) {\n//             mapInstanceRef.current.setCenter(userLocation);\n//             mapInstanceRef.current.setZoom(14);\n\n//             // Remove old marker\n//             if (markerRef.current) {\n//               markerRef.current.setMap(null);\n//             }\n\n//             // Create new marker\n//             markerRef.current = new google.maps.Marker({\n//               position: userLocation,\n//               map: mapInstanceRef.current,\n//               title: \"You are here!\",\n//             });\n\n//             // Fetch hospitals from FastAPI backend\n//             try {\n//               const response = await fetch(\n//                 `http://127.0.0.1:8000/hospitals/?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10000`\n//               );\n//               const data = await response.json();\n//               setData({ hospitals: data.hospitals });\n//               console.log(\"Hospitals:\", data.hospitals);\n//             } catch (error) {\n//               console.error(\"Error fetching hospitals:\", error);\n//             }\n//           }\n//         },\n//         () => {\n//           alert(\"Error: Could not get location. Please enter your location manually.\");\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by your browser.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ textAlign: \"center\" }}>\n//       <div ref={mapRef} style={{ height: \"500px\", width: \"50%\" }}></div>\n//       <button onClick={locateUser} style={{ marginTop: \"10px\", padding: \"10px\" }}>\n//         Find My Location\n//       </button>\n//     {data && data.hospitals && (\n//         <div style={{ marginTop: \"20px\" }}>\n//             <h3>Nearby Hospitals:</h3>\n//             <div>\n//                 {data.hospitals.slice(0, 2).map((hospital: any, index: number) => (\n//                     <li key={index}>\n//                         <strong>{hospital.name}</strong><br />\n//                         {hospital.address}\n//                         {hospital.distance_miles && <><br />{hospital.distance_miles}</>}\n//                         <br />\n//                         <button\n//                             onClick={() => {\n//                                 if (mapInstanceRef.current && markerRef.current) {\n//                                     const directionsService = new google.maps.DirectionsService();\n//                                     const directionsRenderer = new google.maps.DirectionsRenderer({\n//                                         draggable: true,\n//                                         panel: document.getElementById(`directionsPanel-${index}`),\n//                                     });\n//                                     directionsRenderer.setMap(mapInstanceRef.current);\n\n//                                     const origin = markerRef.current?.getPosition();\n//                                     if (!origin) {\n//                                         console.error(\"Origin is not available.\");\n//                                         return;\n//                                     }\n//</div>\n\n//                                     directionsService.route(request, (result, status) => {\n//                                         if (status === google.maps.DirectionsStatus.OK) {\n//                                             directionsRenderer.setDirections(result);\n//                                         } else {\n//                                             console.error(`Directions request failed due to ${status}`);\n//                                         }\n//                                     });\n//                                 }\n//                             }}\n//                         >\n//                             Show Directions\n//                         </button>\n//                         <div id={`directionsPanel-${index}`} style={{ marginTop: \"10px\" }}></div>\n//                     </li>\n//                 ))}\n//             </div>\n//         </div>\n//     )}\n//     </div>\n//   );\n// };\n\n// export default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GOOGLE_MAPS_API_KEY","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","loadGoogleMapsScript","Promise","resolve","reject","window","google","maps","existingScript","document","getElementById","script","createElement","src","id","async","defer","onload","Error","onerror","body","appendChild","Map","_s","mapLoaded","setMapLoaded","mapRef","mapInstanceRef","markerRef","data","setData","then","catch","error","console","current","center","lat","lng","zoom","locateUser","navigator","geolocation","getCurrentPosition","position","userLocation","coords","latitude","longitude","setCenter","setZoom","setMap","Marker","map","title","response","fetch","json","hospitals","log","alert","style","display","justifyContent","textAlign","children","ref","height","width","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","onClick","marginTop","padding","slice","hospital","index","name","address","distance_miles","_markerRef$current","directionsService","DirectionsService","directionsRenderer","DirectionsRenderer","draggable","panel","origin","getPosition","request","destination","travelMode","TravelMode","DRIVING","route","result","status","DirectionsStatus","OK","setDirections","_c","$RefreshReg$"],"sources":["/Users/saakethpula/Documents/HenHacks 2025/henhacks2025/my-app/src/Map.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\nconst loadGoogleMapsScript = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n        if (window.google && window.google.maps) {\n            resolve();\n            return;\n        }\n\n        const existingScript = document.getElementById(\"googleMaps\");\n        if (!existingScript) {\n            const script = document.createElement(\"script\");\n            script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}`;\n            script.id = \"googleMaps\";\n            script.async = true;\n            script.defer = true;\n            script.onload = () => {\n                if (window.google && window.google.maps) {\n                    resolve();\n                } else {\n                    reject(new Error(\"Google Maps failed to load.\"));\n                }\n            };\n            script.onerror = () => reject(new Error(\"Failed to load Google Maps script.\"));\n            document.body.appendChild(script);\n        } else {\n            existingScript.onload = () => resolve();\n        }\n    });\n};\n\nconst Map: React.FC = () => {\n    const [mapLoaded, setMapLoaded] = useState(false);\n    const mapRef = useRef<HTMLDivElement | null>(null);\n    const mapInstanceRef = useRef<google.maps.Map | null>(null);\n    const markerRef = useRef<google.maps.Marker | null>(null);\n    const [data, setData] = useState<{ hospitals: any[] } | null>(null);\n\n    useEffect(() => {\n        loadGoogleMapsScript()\n            .then(() => setMapLoaded(true))\n            .catch((error) => console.error(error));\n    }, []);\n\n    useEffect(() => {\n        if (mapLoaded && mapRef.current) {\n            mapInstanceRef.current = new google.maps.Map(mapRef.current, {\n                center: { lat: 37.7749, lng: -122.4194 }, // Default: San Francisco\n                zoom: 10,\n            });\n        }\n    }, [mapLoaded]);\n\n    const locateUser = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                async (position) => {\n                    const userLocation = {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    };\n    \n                    if (mapInstanceRef.current) {\n                        mapInstanceRef.current.setCenter(userLocation);\n                        mapInstanceRef.current.setZoom(14);\n    \n                        // Remove old marker\n                        if (markerRef.current) {\n                            markerRef.current.setMap(null);\n                        }\n    \n                        // Create new marker\n                        markerRef.current = new google.maps.Marker({\n                            position: userLocation,\n                            map: mapInstanceRef.current,\n                            title: \"You are here!\",\n                        });\n    \n                        // Fetch hospitals from FastAPI backend\n                        try {\n                            const response = await fetch(\n                                `http://127.0.0.1:8000/hospitals/?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10000`\n                            );\n                            const data = await response.json();\n                            setData({ hospitals: data.hospitals });\n                            console.log(\"Hospitals:\", data.hospitals);\n                        } catch (error) {\n                            console.error(\"Error fetching hospitals:\", error);\n                        }\n                    }\n                },\n                () => {\n                    alert(\"Error: Could not get location. Please enter your location manually.\");\n                }\n            );\n        } else {\n            alert(\"Geolocation is not supported by your browser.\");\n        }\n    };\n\n    return (\n        <div style={{ display: \"flex\", justifyContent: \"center\", textAlign: \"center\" }}>\n            <div ref={mapRef} style={{ height: \"500px\", width: \"50%\" }}></div>\n            <div style={{ marginLeft: \"20px\", width: \"30%\" }}>\n                <button onClick={locateUser} style={{ marginTop: \"10px\", padding: \"10px\" }}>\n                    Find My Location\n                </button>\n                {data && data.hospitals && (\n                    <div style={{ marginTop: \"20px\" }}>\n                        <h3>Nearby Hospitals:</h3>\n                        <div>\n                            {data.hospitals.slice(0, 2).map((hospital: any, index: number) => (\n                                <li key={index}>\n                                    <strong>{hospital.name}</strong><br />\n                                    {hospital.address}\n                                    {hospital.distance_miles && <><br />{hospital.distance_miles}</>}\n                                    <br />\n                                    <button\n                                        onClick={() => {\n                                            if (mapInstanceRef.current && markerRef.current) {\n                                                const directionsService = new google.maps.DirectionsService();\n                                                const directionsRenderer = new google.maps.DirectionsRenderer({\n                                                    draggable: true,\n                                                    panel: document.getElementById(`directionsPanel-${index}`),\n                                                });\n                                                directionsRenderer.setMap(mapInstanceRef.current);\n\n                                                const origin = markerRef.current?.getPosition();\n                                                if (!origin) {\n                                                    console.error(\"Origin is not available.\");\n                                                    return;\n                                                }\n\n                                                const request = {\n                                                    origin: origin,\n                                                    destination: hospital.address,\n                                                    travelMode: google.maps.TravelMode.DRIVING,\n                                                };\n\n                                                directionsService.route(request, (result, status) => {\n                                                    if (status === google.maps.DirectionsStatus.OK) {\n                                                        directionsRenderer.setDirections(result);\n                                                    } else {\n                                                        console.error(`Directions request failed due to ${status}`);\n                                                    }\n                                                });\n                                            }\n                                        }}\n                                    >\n                                        Show Directions\n                                    </button>\n                                    <div id={`directionsPanel-${index}`} style={{ marginTop: \"10px\" }}></div>\n                                </li>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Map;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n\n// const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n// const loadGoogleMapsScript = (): Promise<void> => {\n//   return new Promise((resolve, reject) => {\n//     if (window.google && window.google.maps) {\n//       resolve();\n//       return;\n//     }\n\n//     const existingScript = document.getElementById(\"googleMaps\");\n//     if (!existingScript) {\n//       const script = document.createElement(\"script\");\n//       script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}`;\n//       script.id = \"googleMaps\";\n//       script.async = true;\n//       script.defer = true;\n//       script.onload = () => {\n//         if (window.google && window.google.maps) {\n//           resolve();\n//         } else {\n//           reject(new Error(\"Google Maps failed to load.\"));\n//         }\n//       };\n//       script.onerror = () => reject(new Error(\"Failed to load Google Maps script.\"));\n//       document.body.appendChild(script);\n//     } else {\n//       existingScript.onload = () => resolve();\n//     }\n//   });\n// };\n\n// const Map: React.FC = () => {\n//   const [mapLoaded, setMapLoaded] = useState(false);\n//   const mapRef = useRef<HTMLDivElement | null>(null);\n//   const mapInstanceRef = useRef<google.maps.Map | null>(null);\n//   const markerRef = useRef<google.maps.Marker | null>(null);\n//   const [data, setData] = useState<{ hospitals: any[] } | null>(null);\n\n//   useEffect(() => {\n//     loadGoogleMapsScript()\n//       .then(() => setMapLoaded(true))\n//       .catch((error) => console.error(error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (mapLoaded && mapRef.current) {\n//       mapInstanceRef.current = new google.maps.Map(mapRef.current, {\n//         center: { lat: 37.7749, lng: -122.4194 }, // Default: San Francisco\n//         zoom: 10,\n//       });\n//     }\n//   }, [mapLoaded]);\n\n//   const locateUser = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         async (position) => {\n//           const userLocation = {\n//             lat: position.coords.latitude,\n//             lng: position.coords.longitude,\n//           };\n  \n//           if (mapInstanceRef.current) {\n//             mapInstanceRef.current.setCenter(userLocation);\n//             mapInstanceRef.current.setZoom(14);\n  \n//             // Remove old marker\n//             if (markerRef.current) {\n//               markerRef.current.setMap(null);\n//             }\n  \n//             // Create new marker\n//             markerRef.current = new google.maps.Marker({\n//               position: userLocation,\n//               map: mapInstanceRef.current,\n//               title: \"You are here!\",\n//             });\n  \n//             // Fetch hospitals from FastAPI backend\n//             try {\n//               const response = await fetch(\n//                 `http://127.0.0.1:8000/hospitals/?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10000`\n//               );\n//               const data = await response.json();\n//               setData({ hospitals: data.hospitals });\n//               console.log(\"Hospitals:\", data.hospitals);\n//             } catch (error) {\n//               console.error(\"Error fetching hospitals:\", error);\n//             }\n//           }\n//         },\n//         () => {\n//           alert(\"Error: Could not get location. Please enter your location manually.\");\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by your browser.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ textAlign: \"center\" }}>\n//       <div ref={mapRef} style={{ height: \"500px\", width: \"50%\" }}></div>\n//       <button onClick={locateUser} style={{ marginTop: \"10px\", padding: \"10px\" }}>\n//         Find My Location\n//       </button>\n//     {data && data.hospitals && (\n//         <div style={{ marginTop: \"20px\" }}>\n//             <h3>Nearby Hospitals:</h3>\n//             <div>\n//                 {data.hospitals.slice(0, 2).map((hospital: any, index: number) => (\n//                     <li key={index}>\n//                         <strong>{hospital.name}</strong><br />\n//                         {hospital.address}\n//                         {hospital.distance_miles && <><br />{hospital.distance_miles}</>}\n//                         <br />\n//                         <button\n//                             onClick={() => {\n//                                 if (mapInstanceRef.current && markerRef.current) {\n//                                     const directionsService = new google.maps.DirectionsService();\n//                                     const directionsRenderer = new google.maps.DirectionsRenderer({\n//                                         draggable: true,\n//                                         panel: document.getElementById(`directionsPanel-${index}`),\n//                                     });\n//                                     directionsRenderer.setMap(mapInstanceRef.current);\n\n//                                     const origin = markerRef.current?.getPosition();\n//                                     if (!origin) {\n//                                         console.error(\"Origin is not available.\");\n//                                         return;\n//                                     }\n//</div>\n\n//                                     directionsService.route(request, (result, status) => {\n//                                         if (status === google.maps.DirectionsStatus.OK) {\n//                                             directionsRenderer.setDirections(result);\n//                                         } else {\n//                                             console.error(`Directions request failed due to ${status}`);\n//                                         }\n//                                     });\n//                                 }\n//                             }}\n//                         >\n//                             Show Directions\n//                         </button>\n//                         <div id={`directionsPanel-${index}`} style={{ marginTop: \"10px\" }}></div>\n//                     </li>\n//                 ))}\n//             </div>\n//         </div>\n//     )}\n//     </div>\n//   );\n// };\n\n// export default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}